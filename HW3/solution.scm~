;;;;;;;;;;;;;;;;;;; COMP 105 SCHEME ASSIGNMENT ;;;;;;;;;;;;;;;




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Exercise 1


;; (contig-sublist? xs ys) finds if xs is a subset of ys where
;;                         xs is found contiguously in ys

;; laws:
;;   (contig-sublist? ( car xs '()) == #t
;;   (contig-sublist? (  '() car ys) == #f
;;   (contig-sublist? ( car ys '() car ys) &&
;;                    (= car xs car ys) ==  contig-sublist? (cdr xs cdr ys)
;;   (contig-sublist? ( car ys '() car ys) &&
;;                    (=/= car xs car ys) == contig-sublist? (xs cdr ys)
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define contig-sublist? (xs ys)
    (if (null? xs)
        #t
        (if (null? ys)
                #f
                (if (= (car xs) (car ys))
                        (contig-sublist? (cdr xs) (cdr ys))
                        (contig-sublist? xs (cdr ys))
                        )
                )
        )
    )

        ;; replace next line with good check-expect or check-assert tests
        (check-assert (contig-sublist? '() '(0 1 2 3)))
        (check-assert (not (contig-sublist? '(1 2 3) '())))
        (check-assert (contig-sublist? '(1 2 3) '(1 2 3)))
        (check-assert (contig-sublist? '(1 2 3) '(0 1 2 3)))
        (check-assert (not (contig-sublist? '(4 5 6) '(0 5 2 4))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Exercise 8


;; (mirror xs) swaps all values in xs such that the last value in xs becomes
;;             the first and the first, the last.

;; laws:
;;   (mirror xs) (xs != null) == append( mirror(cdr xs) x )
;;   (mirror xs) (car xs = ys) == append( mirror(cdr xs) mirror(cdr ys) )
;;   (mirror xs) (car xs = x) == append( mirror(cdr xs) x )
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define mirror (xs)
    (if (null? xs)
        xs
      (append
          (mirror (cdr xs))
            (if (atom? (car xs))
                (list1 (car xs))
                (list1 (mirror (car xs)))

              )
          )
        )
    )

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (mirror '()) '())
        (check-expect (mirror '(1 2)) '(2 1))
        (check-expect (mirror '(1 (2 3))) '((3 2) 1))
        (check-expect (mirror '(1 (2 3) 1)) '(1 (3 2) 1))
                    (check-expect (mirror '((2 3) 1)) '(1 (3 2)))
                    (check-expect (mirror '((2 3) (4 5))) '((5 4) (3 2)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Exercise 31


;; (takewhile p? xs) if the value of xs satisfies p? add it to list,
;;                   return x in xs that satisfies p? until x does not satisfy p

;; laws:
;;   (takewhile p? xs) && ((null? xs))== '()
;;   (takewhile p? xs) && (= (p? xs) #t)== append (car xs)
;;                                         (takewhile p? (cdr xs)))
;;   (takewhile p? xs) && (= (p? xs) #f== '()

;; [optional notes about where laws come from, or difficulty, if any]
;;even used as test function, if x is even return #t else #f
(define even? (x) (= (mod x 2) 0))

(define takewhile (p? xs)
        (if (null? xs)
                '()
                (if (p? (car xs))
                        (append (list1 (car xs)) (takewhile p? (cdr xs)))
                        '()
                        )
                )
        )


        ;; replace next line with good check-expect or check-assert tests
        (check-expect (takewhile even? '(2 4 7 8 10 12)) '(2 4))
        (check-expect (takewhile even? '()) '())




;; (dropwhile p? xs) returns all values x in xs once a value that does not
;;                   satisfy p? is found

;; laws:
;;   (dropwhile p? xs) && ((null? xs))== '()
;;   (dropwhile p? xs) && (= (p? xs) #f)== append (car xs)
;;                                         (dropwhile p? (cdr xs)))
;;   (dropwhile p? xs) && (= (p? xs) #t== '()

;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define dropwhile (p? xs)
    (if (null? xs)
                '()
                (if (p? (car xs))
                        (dropwhile p? (cdr xs))
                        xs
                        )
                )
        )

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (dropwhile even? '(2 4 6 7 8 10 12)) '(7 8 10 12))
        (check-expect (dropwhile even? '()) '())


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Exercise C


;; (zip xs ys) combines the values of xs with the values in ys, such that
;;             the ith value in xs is paired with the ith value in ys.

;; laws:
;;   (zip xs null) ==  '()
;;   (zip null ys) ==  '()
;;   (zip xs ys) == (cons (cons( (car xs) (car ys))) (zip (cdr xs) (cdr ys)))
;;
;; [optional notes about where laws come from, or difficulty, if any]

(define zip (xs ys)
    (if (null? xs)
        '()
        (if (null? ys)
                '()
                (cons (list2 (car xs) (car ys)) (zip (cdr xs) (cdr ys)))
                )
        )
    )
        ;; replace next line with good check-expect or check-assert tests
        (check-expect (zip '(a b c) '(2 4 6)) '((a 2)(b 4)(c 6)))
        (check-expect (zip '(a) '(7)) '((a 7)))
        (check-expect (zip '() '()) '())



;; (unzip ps) separates values into two lists such that the ith value of each
;;            list are the values stored in the ith position in ps.

;; laws:
;;   (unzip null) == '()
;;   (unzip ps) == (cons (map car ps) (map (car (cdr (ps)))))
;; [optional notes about where laws come from, or difficulty, if any]

(define unzip (ps)
        (list2 (map car ps) (map cadr ps))
    ) ;; replace this line with good code

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (unzip '((a 2) (b 4) (c 6)))  '((a b c) (2 4 6)))
        (check-expect (unzip '((a 7))) '((a)(7)))
        (check-expect (unzip (zip '() '())) '(()()))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Exercise D


;; (arg-max f xs) returns the value x in xs which produces the greatest value
;;                when input into f.

;; laws:
;;   (arg-max f xs) && (= (length xs) 1) ==  car(xs)
;;   (arg-max f xs) && ((f (car xs))-(f (arg-max f (cdr xs))>0) ==  car(xs)
;;   (arg-max f xs) && ((f (car xs))-(f (arg-max f (cdr xs))<0)
;;                                                    == (arg-max f (cdr xs))
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]
(define add1 (x) (+ 1 x))
(define arg-max (f xs)
    (if (null? (cdr xs))
        (car xs)
        (if (> (f (car xs))  (f (arg-max f (cdr xs))))
                (car xs)
                (arg-max f (cdr xs))
                )
        )
    )

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (arg-max add1 '(4 0 2)) 4)
        (check-expect (arg-max add1 '(1)) 1)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Exercise E


;; (rightmost-point ps) returns the p in ps with the greatest x value

;; laws:
;;   (rightmost-point px) == (point-x (arg-max (point-x p) ps))
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(record point [x y])

(define rightmost-point (ps)
    (point-x (arg-max point-x ps))
    )
        ;; replace next line with good check-expect or check-assert tests
        (check-expect (rightmost-point '((make-point 0 0) (make-point 0 1)
                      (make-point 1 2)) ) 1)
